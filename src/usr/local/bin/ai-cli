#!/bin/bash
#    AI-CLI Simplifying AI Experiments
#    Copyright (C) 2022  Marcel Arpogaus, Julian Jandeleit
#
#    This program is free software: you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation, either version 3 of the License, or
#    (at your option) any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program.  If not, see <https://www.gnu.org/licenses/>.

# Exit on Error
set -e

# Function definitions #########################################################
show_help() {
  DSC_PATTERN="[[:alnum:][:blank:]_\.\(\)\$\-\,\'<>]"
  DOC_PATTERN="#[[:blank:]]*($DSC_PATTERN*(@[A-Z]{3,}@?)?$DSC_PATTERN*)"
  OPTIONS_PATTERN="^[[:blank:]]*([a-z])\)[[:blank:]]*${DOC_PATTERN}$"
  OPTIONS=$(grep -P "$OPTIONS_PATTERN" "$0")
  COMMANDS_PATTERN="^[[:blank:]]*([a-z\-]{3,})\)[[:blank:]]*${DOC_PATTERN}$"
  COMMANDS=$(grep -P "$COMMANDS_PATTERN" "$0")
  spaces=$(printf ' %.0s' {1..100})
  echo "Usage: $(basename "$0") [OPTIONS] COMMAND [ARGS...]"
  echo ""
  echo "This script helps you to conduct your ai experiments."
  echo ""
  echo "Options:"
  IFS=$'
'
  for o in $OPTIONS 'h)#Show help'; do
    [[ $o =~ $OPTIONS_PATTERN ]]
    opt=${BASH_REMATCH[1]}
    arg=$(tr -d @ <<<${BASH_REMATCH[3]})
    desc=$(
      export GPUS CUDA_VERSION
      tr -d @ <<<${BASH_REMATCH[2]} | envsubst
    )
    d="$((18 - ${#cmd} - ${#arg}))"
    printf "  -%s %s%0.*s%s\n" "$opt" "$arg" $d $spaces "$desc"
  done
  echo ""
  echo "Commands:"
  IFS=$'
'
  for c in $COMMANDS; do
    [[ $c =~ $COMMANDS_PATTERN ]]
    cmd=${BASH_REMATCH[1]}
    arg=$(tr -d @ <<<${BASH_REMATCH[3]})
    desc=$(tr -d @ <<<${BASH_REMATCH[2]})
    d="$((20 - ${#cmd} - ${#arg}))"
    printf "  %s %s%0.*s%s\n" "$cmd" "$arg" $d $spaces "$desc"
  done
}

dc() {
  FILE=$1
  shift
  docker-compose --project-name $USER-$FILE \
    --file "${DOCKER_COMPOSE_PATH}/${FILE}.docker-compose.yaml" \
    $*
}

# docker_run PARAM runs PARAM as command with workspace.docker-compose.yaml
docker_run() {
  SERVICE_NAME=$1
  shift
  dc workspace --project-directory "$PWD" \
    run $RUN_ARGS \
    $SERVICE_NAME "$*"
}

basic_auth() {
  echo "INFO: basic_auth ${HTPASSWD_PATH} -- $1"
  # Create htpasswd for Basic Auth
  if [[ ! -e ${HTPASSWD_PATH}/$1 ]]; then
    echo "Please enter a username and password to restrict access to: $1"
    # Read Username
    echo -n "Username: "
    read -r username
    [ -z $username ] && exit 1
    # Read Password
    echo -n "Password: "
    read -rs password
    [ -z $password ] && exit 1
    echo

    htpasswd -Bb -c "${HTPASSWD_PATH}/$1" $username $password

  fi
}
init() {
  echo "INFO: Initialization started"
  echo "INFO: init ${USER}_mlflow_bridge"
  docker network create ${USER}_mlflow_bridge &>/dev/null || true # to continue if already exists
  echo "INFO: init ${HOME_PATH}"
  mkdir -p ${HOME_PATH}
  mkdir -p $EXTENSION_PATH
  chmod 777 $EXTENSION_PATH
  echo "INFO: init docker workspace"
  ai-cli build &>/dev/null
  docker_run workspace mamba init &>/dev/null
  echo "INFO: init mlflow server"
  ai-cli build-server &>/dev/null
  echo "INFO: Initialization complete"
}
check_init() {
  err_cnt=0
  # check dependencies that can be set up using init()
  if [[ -n $(docker network inspect $(docker network ls -q) | grep "${USER}_mlflow_bridge") ]] &&
    [[ -w ${HOME_PATH} ]]; then
    : # null command
  else
    echo ""
    echo "################################################################"
    echo ""
    echo "ERROR:    Incomplete initialization!"
    echo "          Please run 'ai-cli init'."
    echo ""
    echo "################################################################"
    echo ""

    ((err_cnt += 1))
  fi

  # check for dependencies that currently need to be set up manually
  if [[ -z $(git config user.name) ]] ||
    [[ -z $(git config user.email) ]]; then
    echo ""
    echo "################################################################"
    echo ""
    echo "ERROR:    Git user not found!"
    echo "          Please setup global git user:"
    echo "          'git config --global user.name [YOUR USER NAME]'"
    echo "          'git config --global user.email [YOUR EMAIL]'"
    echo ""
    echo "################################################################"
    echo ""

    ((err_cnt += 1))
  fi

  return ${err_cnt}
}
disambiguate_host() {
  ### relies on "notebook" and "lab" being present in url ###

  # check if hosts are already in use
  hname=$1
  instances=""
  if [ -n "$JUPYTER_CONTAINER" ]; then
    hosts=$(echo "$JUPYTER_CONTAINER" | xargs docker inspect -f '                
		{{range .Config.Env }}
                        {{with $line := (split . "=")}}
                                {{if eq (index . 0) "VIRTUAL_HOST"}}
                                        {{ index . 1 }}
                                {{end}}
                        {{end}}
                {{end}}
		')
    # instances from same user with same name
    # cat is needed to prevent exit on negative result
    # note that expected format is hardcoded here
    hname_front=$(echo "$hname" | sed -E "s/(^[A-Za-z]+\-[A-Za-z]+).*/\1/" | cat)
    instances=$(echo "$hosts" | grep "$hname_front")
    # numbers alreaady occupied
    numbers=$(echo "$instances" | sed -E "s/.*([0-9])\..*/\1/")
  fi
  # no running instance, no need to calculate number to append
  if [ "$instances" = "" ]; then
    echo "$hname"
    return 0
  fi

  n_max=10
  changed=0
  for i in $(seq 2 $n_max); do
    found=$(echo "$numbers" | grep -c "$i" | cat)
    #echo "i=$i: $found"
    # number not in use, so can be used here
    if [ "$found" -eq "0" ]; then
      hname=$(echo "$hname" | sed -E "s/(\-lab|\-notebook)/\1\-${i}/")
      changed=1
      break
    fi
  done

  # Error if something should have changed but didn't  due to maximum number reached.
  if [ "$changed" -eq "0" ]; then
    echo "ERROR: Too many open jupyter instances. Instances of same type may not exceed $n_max."
    exit 1
  fi

  echo "$hname"
}

# ---- show related functions
show_docker_associated_images() {
  echo "Docker Associated Images"
  docker image list "${IMAGE_PREFIX}" |
    while read -r line; do
      printf '   %s\n' "$line"
    done
}
show_jupyter_status() {
  echo "Jupyter status:"
  if [ -n "$JUPYTER_CONTAINER" ]; then
    # we use go templates to build the desired output
    # numbers below are arbitrary max-width borders used to align columns
    jupyter_sourcepaths=$(echo "$JUPYTER_CONTAINER" | xargs docker container inspect -f '	
		{{range .Mounts}}
			{{if eq .Destination "/app"}}
				{{.Source}}
			{{end}}
		{{end}}
		')
    jupyter_urls=$(echo "$JUPYTER_CONTAINER" | xargs docker container inspect -f '	
		{{range .Config.Env }}
			{{with $line := (split . "=")}}
				{{if eq (index . 0) "VIRTUAL_HOST"}}
					{{ index . 1 }}
				{{end}}
			{{end}}
		{{end}}
		')
    jupyter_cudas=$(echo "$JUPYTER_CONTAINER" | xargs docker container inspect -f '	
		{{ $found := "False" }}
		{{range .Config.Env}}	
			{{with $line := (split . "=")}}
				{{if eq (index . 0) "CUDA_VERSION"}}
					{{index . 1}}
					{{ $found = "True" }}
				{{end}}
			{{end}}
		{{end}}
		{{ if eq $found "False"  }}
		   None
		{{end}}
		')

    jupyter_tokens=""
    for cont in $JUPYTER_CONTAINER; do
      jupyter_token=$(docker exec $cont jupyter server list 2>/dev/null | sed -rn 's/(https?:\/\/).*token=([a-z0-9]+)\b.*/\2/p')
      if [ -z "$jupyter_token" ]; then
        jupyter_token="None"
      fi
      jupyter_tokens="$jupyter_tokens $jupyter_token"
    done

    # convert to arrays to be able to index lists
    jupyter_sourcepaths=($(echo $jupyter_sourcepaths))
    jupyter_urls=($(echo $jupyter_urls))
    jupyter_cudas=($(echo $jupyter_cudas))
    jupyter_tokens=($(echo $jupyter_tokens))
    otheruserjups=0
    # print aligned
    printf "   %*s %*s %*s %*s\n" -50 "JUPYTER URL" -50 "JUPYTER WORKSPACE" -50 "RUNNING CUDA" -50 "TOKEN"

    for ((i = 0; i < ${#jupyter_urls[@]}; ++i)); do
      # check user by looking if url _starts_ with user
      if [[ ${jupyter_urls[$i]} != "$USER"* ]]; then
        otheruserjups=$((otheruserjups + 1))
      else
        # numbers are for aligned formatting (may be needed to be improved in future)
        printf "   %*s %*s %*s %*s\n" -50 "https://${jupyter_urls[$i]}" -50 "${jupyter_sourcepaths[$i]}" -50 "CUDA ${jupyter_cudas[$i]}" -50 "${jupyter_tokens[$i]}"
      fi
    done
    echo ""
    echo "   There are $otheruserjups instances running from other users."
  else
    echo "   No jupyter server running"
  fi
}
show_mlflow_status() {
  echo "MLflow status:"

  if [ $(docker ps -qf name=${USER}-mlflow-server) ]; then
    echo "   https://${MLFLOW_VIRTUAL_HOST}"
  else
    echo "   MLFLOW inactive"
  fi

}
show_status() {
  show_docker_associated_images
  echo ""
  show_mlflow_status
  echo ""
  show_jupyter_status
}

# Read configuration file #####################################################
CONFIG_PATH=/etc/ai-cli/config
source $CONFIG_PATH
VERSION=$(cat /etc/ai-cli/version)

# Check if paths correctly configured
for p in DOCKER_COMPOSE_PATH HTPASSWD_PATH MLFLOW_DATA; do
  [[ -z ${!p} ]] && {
    echo "ERROR: ${p} is undefined! Check your configuration in $CONFIG_PATH"
    exit 1
  }
  [[ ! -e ${!p} ]] && {
    echo "ERROR: ${p} (${!p}) dos not exists! Check your configuration in $CONFIG_PATH"
    exit 1
  }
done

# CHECK INIT ###################################################################
# Looks at known dependencies and errors if it finds at least one of them unmet.
# The init method fixes issues that can be solved automatically. This is necessary
# setup user workspace before first use.
[ "$1" = init ] || check_init || {
  exit $v
}

# Variable definitions ########################################################
MLFLOW_LOCAL_PROJECT="$PWD"
MLFLOW_ENV_FILE=$DOCKER_COMPOSE_PATH/run.env
DOCKER_USER=$(id -u):$(id -g)
NB_UID=$(id -u)
NB_GID=$(id -g)
GIT_USER_NAME="'$(git config --get user.name)'" # git used in workspace-base/entrypoint.sh
GIT_USER_EMAIL="$(git config --get user.email)"
MLFLOW_VIRTUAL_HOST=${USER}-mlflow.$URLNAME
JUPYTER_CMD="jupyter notebook --notebook-dir=/app --ip 0.0.0.0 --no-browser"
JUPYTER_LAB_CMD="jupyter lab --notebook-dir=/app --ip 0.0.0.0 --no-browser --collaborative"
JUPYTER_CONTAINER=$(docker ps -qf name=".*jupyter.*")
NOTEBOOK_VIRTUAL_HOST=${USER}-notebook.$URLNAME
LAB_VIRTUAL_HOST=${USER}-lab.$URLNAME

# default runtime
# read from docker and extract value
RUNTIME=$(docker info | grep -i "Default Runtime")
RUNTIME=${RUNTIME#*: }

# define image repo prefix and tag
IMAGE_TAG="default"
IMAGE_PREFIX=ai-cli/${USER}

# CLI args defaults
GPUS=""
RUN_VOLUMES=()
RUN_ARGS="--rm"
CONDA_DIR="/home/${USER}/.conda/envs/"

# CLI Arguments ################################################################
while getopts :he:g:n:c:v:i:t:r: flag; do
  case "${flag}" in
    v) # Specify additional docker @VOLUME@s
      # -v is only valid on certain commands
      valid_commands=("bash run lab notebook")
      valid_v=false
      for token in "$@"; do
        if [[ " ${valid_commands[*]} " =~ " ${token} " ]]; then
          valid_v=true
        fi
      done
      if [[ $valid_v == false ]]; then
        echo "ERROR: -v used in wrong context. Only valid when command is in list: ${valid_commands}."
        exit 1
      fi

      RUN_VOLUMES+=($OPTARG)
      ;;
    e) # Specify environment @FILE
      MLFLOW_ENV_FILE=${OPTARG} && source "$MLFLOW_ENV_FILE" ;;
    g) # Enable gpu support. Set specific @GPUS, e.g. 0,1 for gpu 0 and 1.
      GPUS=${OPTARG}
      RUNTIME="nvidia"
      ;;
    n) # Specify experiment @NAME
      MLFLOW_EXPERIMENT_NAME=${OPTARG}
      ;;
    c) # Build with cuda support. Specify @CUDA version to use. Tags image with 'c<VERSION>' by default.
      valid_c=false
      for token in "$@"; do
        if [[ $token == "build" ]]; then
          valid_c=true
        fi
      done
      if [[ $valid_c == false ]]; then
        echo "ERROR: -c used in wrong context. Only valid when you call 'build'."
        exit 1
      fi
      CUDA_VERSION=${OPTARG}
      IMAGE_TAG=c"$CUDA_VERSION"

      ;;
    i) # Specify docker @IMAGE to be used.
      valid_i=true
      for token in "$@"; do
        if [[ $token == "build" ]]; then
          valid_i=false
        fi
      done
      if [[ $valid_i == false ]]; then
        echo "ERROR: -i used in wrong context. Not valid when you call 'build' use -t or -c instead."
        exit 1
      fi
      IMAGE_NAME="${OPTARG}"
      ;;
    t) # Specify image @TAG to be used.
      IMAGE_TAG="${OPTARG}"
      ;;
    *) show_help && exit 0 ;;
  esac
done
shift $((OPTIND - 1)) # to skip option arguments when evaulating command

# CLI args for docker-compose run
for v in ${RUN_VOLUMES[@]}; do
  RUN_ARGS+=" -v $v"
done
if [[ -n $MLFLOW_EXPERIMENT_NAME ]]; then
  RUN_ARGS+=" -e MLFLOW_EXPERIMENT_NAME=$MLFLOW_EXPERIMENT_NAME"
fi

# BUILD IMAGE NAME TO USE
if [[ -z $IMAGE_NAME ]]; then
  IMAGE_NAME=${IMAGE_PREFIX}:${IMAGE_TAG}
fi

# Exports #####################################################################
# Export env for docker-compose
export ADDITIONAL_GROUP
export CONDA_DIR
export DOCKER_USER
export EXTENSION_PATH
export GIT_USER_EMAIL
export GIT_USER_NAME
export GPUS
export HOME_PATH
export IMAGE_NAME
export JUPYTERPORT
export MLFLOWPORT
export MLFLOW_DATA
export MLFLOW_ENV_FILE
export NB_GID
export NB_UID
export RUNTIME
export URLNAME

# show docker info ####################################################################
echo "INFO: Using image ${IMAGE_NAME}"
echo "INFO: using runtime $RUNTIME"
[ $GPUS ] && echo "INFO: using gpus '$GPUS'"
# Run command ##################################################################
if [[ $# == 0 ]]; then
  show_help && exit 1
else
  CMD=$1
  shift
fi
case ${CMD} in
  init) # initialize this script for your user
    init ;;
  start-server) # start mlflow server
    basic_auth "$MLFLOW_VIRTUAL_HOST"
    dc server up -d
    ;;
  stop-server) # stop mlflow server
    dc server down ;;
  restart-server) # restart mlflow server
    dc server down
    ai-cli build-server
    dc server up -d
    ;;
  build-server) # build mlflow server
  docker build \
      -t ai-cli/mlflow-server \
      --build-arg=PYTHON_VERSION=$PYTHON_VERSION \
      --build-arg=MLFLOW_VERSION=$MLFLOW_VERSION \
      $DOCKER_COMPOSE_PATH/mlflow
    ;;
  status) # show status of your environment
    show_status ;;
  build) # build image from dockerfile

    # workspace-cuda depends on workspace-base image existing so is always built
    echo "INFO: Specified Cuda Version: '${CUDA_VERSION}'"
    echo "INFO: Building workspace-base"
    docker build \
      -t ${IMAGE_NAME} \
      -t ${IMAGE_PREFIX}:base \
      --build-arg=ARG_NB_USER="$USER" \
      --build-arg=ARG_NB_UID="$NB_UID" \
      --build-arg=ARG_NB_GID="$NB_GID" \
      --build-arg=ARG_HOME="/home/${USER}" \
      --build-arg=PYTHON_VERSION="$PYTHON_VERSION" \
      --build-arg=MLFLOW_VERSION="$MLFLOW_VERSION" \
      $DOCKER_COMPOSE_PATH/workspace-base/

    if [ ${CUDA_VERSION} ]; then
      echo "INFO: Building workspace-cuda"
      # version formats vary so we need to split into major and minor version
      CMAJ=${CUDA_VERSION%\.*}
      CMIN=${CUDA_VERSION#*\.}
      echo "INFO: CMAJ ${CMAJ}, CMIN ${CMIN}"
      echo "INFO: NVIDIA DRIVER ${DRIVER_VERSION}"
      docker build \
        -t ${IMAGE_NAME} \
        --build-arg=BASE_IMAGE="${IMAGE_PREFIX}:base" \
        --build-arg=CMAJ="$CMAJ" \
        --build-arg=CMIN="$CMIN" \
        $DOCKER_COMPOSE_PATH/workspace-cuda/
    fi
    ;;
  bash) # start bash shell inside container
    export MLFLOW_LOCAL_PROJECT
    docker_run workspace bash
    ;;
  notebook) # start jupyter notebook server
    JUPYTER_VIRTUAL_HOST=$(disambiguate_host $NOTEBOOK_VIRTUAL_HOST)
    export JUPYTER_VIRTUAL_HOST
    export MLFLOW_LOCAL_PROJECT
    echo "INFO: Running notebook server in: $MLFLOW_LOCAL_PROJECT"
    echo "      Listening at: https://$JUPYTER_VIRTUAL_HOST"
    docker_run jupyter $JUPYTER_CMD
    ;;
  lab) # start jupyter lab server
    JUPYTER_VIRTUAL_HOST=$(disambiguate_host $LAB_VIRTUAL_HOST)
    export JUPYTER_VIRTUAL_HOST
    export MLFLOW_LOCAL_PROJECT
    echo "INFO: Running lab server in: $MLFLOW_LOCAL_PROJECT"
    echo "      Listening at: https://$JUPYTER_VIRTUAL_HOST"
    docker_run jupyter $JUPYTER_LAB_CMD
    ;;
  runner) # start cml runner for repo
      args=( "$@" )
      TOKEN_ARG="${args[-1]}"
      URL_ARG="${args[-2]}"
      echo "INFO: Providing runner for '$URL_ARG' with token '$TOKEN_ARG'. GPUS: ${GPUS}"
      GPUOPT=""
      if [[ -n "$GPUS" ]]; then
	GPUOPT="--gpus ${GPUS}"
      fi

      docker run \
      -e REPO_TOKEN="$TOKEN_ARG" \
      -it \
      --rm \
      --user jovyan \
      --network="${USER}_mlflow_bridge" \
      --mount type=bind,source="$DVC_DATA",target=/data \
      test cml runner launch \
      --repo="$URL_ARG" \
      --token="$TOKEN_ARG" \
      --driver="gitlab" \
      --labels="local,runner,ai-cli" \
      --idle-timeout -1
      
    ;;
  exec) # execute @PROGRAMM inside container
    if [[ $# == 0 ]]; then
      echo "ERROR: Please provide a program name as argument"
      show_help
      exit 1
    fi
    export MLFLOW_LOCAL_PROJECT
    docker_run workspace $*
    ;;
  run) # run MLProject from @PATH inside container
    if [[ $# == 0 ]]; then
      echo "ERROR: Please provide a path as argument"
      show_help
      exit 1
    fi

    echo "INFO: MLflow data path: $MLFLOW_DATA"
    if [[ -n $MLFLOW_EXPERIMENT_NAME ]]; then
      echo "INFO: MLflow experiment name: $MLFLOW_EXPERIMENT_NAME"
    fi
    export MLFLOW_LOCAL_PROJECT
    echo "INFO: Running MLProject from $MLFLOW_LOCAL_PROJECT"
    echo "INFO: Executed Command:  mlflow run $*"
    docker_run workspace mlflow run $*
    ;;
  run-from-git) # run MLProject from git repo at @URI inside container
    if [[ $# != 0 && -z $MLFLOW_GIT_PROJECT ]]; then
      MLFLOW_GIT_PROJECT=$1
    elif [[ $# == 0 && -z $MLFLOW_GIT_PROJECT ]]; then
      echo "ERROR: No git repo specified"
      show_help
      exit 1
    fi
    echo "INFO: Running MLProject from $MLFLOW_GIT_PROJECT"
    docker_run workspace mlflow run $MLFLOW_GIT_PROJECT
    ;;
  info) # show basic paths and env variables
      echo "INFO: MLFLOW_VERSION=${MLFLOW_VERSION}"
      echo "INFO: DOCKER_USER=${DOCKER_USER}"
      echo "INFO: MLFLOW_DATA=${MLFLOW_DATA}"
      echo "INFO: URLNAME=${URLNAME}"
      echo "INFO: EXTENSION_PATH=${EXTENSION_PATH}"
      echo "INFO: VERSION=${VERSION}"
    ;;
  version) # show git commit hash this script is installed with
      echo "$VERSION"
    ;;
  reset-password) # Reset Password for mlflow you will setup a new one at next server start
    rm "${HTPASSWD_PATH}/${MLFLOW_VIRTUAL_HOST}"
    echo "successfully reset password"
    ;;
  *) show_help && exit 1 ;;
esac
